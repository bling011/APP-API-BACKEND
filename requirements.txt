fastapi==0.100.0
uvicorn==0.23.0# No code was selected, so we'll create a basic FastAPI application structure

from fastapi import FastAPI
from fastapi.responses import JSONResponse
from fastapi.requests import Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import sessionmaker
from databases import Database
import uvicorn
import os
from dotenv import load_dotenv

load_dotenv()

app = FastAPI()

origins = [
    "http://localhost:8000",
    "http://localhost:3000",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Database connection
DATABASE_URL = os.getenv("DATABASE_URL")
database = Database(DATABASE_URL)
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    name = Column(String)
    email = Column(String)

Base.metadata.create_all(bind=engine)

@app.on_event("startup")
async def database_connect():
    await database.connect()

@app.on_event("shutdown")
async def database_disconnect():
    await database.disconnect()

@app.get("/users/")
async def read_users():
    query = """SELECT * FROM users"""
    results = await database.fetch_all(query=query)
    return results
sqlalchemy==2.0.15
databases==0.6.2
alembic==1.9.4
asyncpg==0.27.0
psycopg2-binary==2.9.5
pytest==7.1.2
pytest-asyncio==0.18.3
httpx==0.23.0
aiohttp==3.8.3
python-dotenv==0.20.0
requests==2.28.1
pyyaml==6.0
jinja2==3.1.2
pydantic==1.10.8